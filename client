import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.Socket;

public class ClientApplication extends JFrame {
    // Constants for server details
    private static final String SERVER_IP = "localhost";
    private static final int SERVER_PORT = 12345;

    // GUI components
    private JTextField classNameField;
    private JTextField dateTimeField;
    private JTextField roomNumberField;
    private JTextArea responseArea;

    // Socket and IO streams
    private Socket socket;
    private BufferedReader reader;
    private PrintWriter writer;

    public ClientApplication() {
        // GUI setup
        setTitle("Class Scheduler Client");
        setSize(400, 300);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        setLocationRelativeTo(null);

        // Inputs and buttons
        JPanel inputPanel = new JPanel(new GridLayout(4, 2));
        inputPanel.add(new JLabel("Class Name:"));
        classNameField = new JTextField();
        inputPanel.add(classNameField);
        inputPanel.add(new JLabel("Date and Time:"));
        dateTimeField = new JTextField();
        inputPanel.add(dateTimeField);
        inputPanel.add(new JLabel("Room Number:"));
        roomNumberField = new JTextField();
        inputPanel.add(roomNumberField);

        // Button for requests
        JButton addButton = new JButton("Add Class");
        addButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                sendMessage("ADD");
            }
        });
        inputPanel.add(addButton);

        // Button to display
        JButton displayButton = new JButton("Display Schedule");
        displayButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                sendMessage("DISPLAY");
            }
        });
        inputPanel.add(displayButton);

        // Response area to display server responses
        responseArea = new JTextArea();
        responseArea.setEditable(false);
        JScrollPane scrollPane = new JScrollPane(responseArea);

        // Adding components to the frame
        getContentPane().setLayout(new BorderLayout());
        getContentPane().add(inputPanel, BorderLayout.NORTH);
        getContentPane().add(scrollPane, BorderLayout.CENTER);

        // Make frame visible
        setVisible(true);

        // Connect to server
        connectToServer();
    }

    private void connectToServer() {
        try {
            // Create socket connection to server
            socket = new Socket(SERVER_IP, SERVER_PORT);
            reader = new BufferedReader(new InputStreamReader(socket.getInputStream()));
            writer = new PrintWriter(socket.getOutputStream(), true);
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    private void sendMessage(String action) {
        // Get input values from GUI fields
        String className = classNameField.getText();
        String dateTime = dateTimeField.getText();
        String roomNumber = roomNumberField.getText();

        // Send message to server with action and input values
        if (!className.isEmpty() && !dateTime.isEmpty() && !roomNumber.isEmpty()) {
            writer.println(action + ":" + className + ":" + dateTime + ":" + roomNumber);
            try {
                // Receive response from server and display it
                String response = reader.readLine();
                responseArea.append(response + "\n");
            } catch (Exception e) {
                e.printStackTrace();
            }
        } else {
            // If any field is empty, display an error message
            responseArea.append("Error: Please fill in all options.\n");
        }
    }

    public static void main(String[] args) {
        // Create client application instance
        SwingUtilities.invokeLater(new Runnable() {
            @Override
            public void run() {
                new ClientApplication();
            }
        });
    }
}
