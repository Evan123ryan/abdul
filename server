import java.io.BufferedReader;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;

/**
 * ServerApp class represents the server application that handles client requests.
 * It stores class schedules received from clients and performs actions like adding,
 * removing, and displaying schedules.
 */
public class ServerApp {
    // Port number for server communication
    private static final int PORT = 12345;
    // Data structure to store class schedules
    private static HashMap<String, ArrayList<String>> classSchedule = new HashMap<>();

    /**
     * Main method to start the server application.
     * It listens for client connections and handles them in separate threads.
     */
    public static void main(String[] args) {
        try {
            ServerSocket serverSocket = new ServerSocket(PORT);
            System.out.println("Server started. Waiting for clients...");

            while (true) {
                Socket clientSocket = serverSocket.accept();
                System.out.println("Client connected: " + clientSocket);

                // Handle client connection in a separate thread
                Thread clientThread = new Thread(new ClientHandler(clientSocket));
                clientThread.start();
            }
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    /**
     * ClientHandler class represents a thread that handles communication with a single client.
     * It receives messages from the client, processes them, and sends back responses.
     */
    private static class ClientHandler implements Runnable {
        private Socket clientSocket;

        /**
         * Constructor to initialize a ClientHandler with a client socket.
         * @param clientSocket The socket representing the client connection.
         */
        public ClientHandler(Socket clientSocket) {
            this.clientSocket = clientSocket;
        }

        /**
         * Run method to handle communication with the client.
         * It receives messages from the client, processes them, and sends back responses.
         */
        @Override
        public void run() {
            try {
                BufferedReader reader = new BufferedReader(new InputStreamReader(clientSocket.getInputStream()));
                PrintWriter writer = new PrintWriter(clientSocket.getOutputStream(), true);

                String clientMessage;
                while ((clientMessage = reader.readLine()) != null) {
                    // Process client request
                    String[] parts = clientMessage.split(":");
                    String action = parts[0];
                    String className = parts[1];
                    String dateTime = parts[2];
                    String roomNumber = parts[3];

                    switch (action) {
                        case "ADD":
                            // Add class to schedule
                            addClass(className, dateTime, roomNumber, writer);
                            break;
                        case "REMOVE":
                            // Remove class from schedule
                            removeClass(className, writer);
                            break;
                        case "DISPLAY":
                            // Display schedule for a class
                            displaySchedule(className, writer);
                            break;
                        default:
                            // Invalid action
                            writer.println("Error: Invalid action.");
                            break;
                    }
                }

                // Close resources
                reader.close();
                writer.close();
                clientSocket.close();
            } catch (Exception e) {
                e.printStackTrace();
            }
        }

        /**
         * Method to add a class to the schedule.
         * It checks for clashes and notifies the client accordingly.
         * @param className The name of the class to be added.
         * @param dateTime The date and time of the class.
         * @param roomNumber The room number for the class.
         * @param writer PrintWriter to send responses to the client.
         */
        private void addClass(String className, String dateTime, String roomNumber, PrintWriter writer) {
            if (classSchedule.containsKey(className)) {
                writer.println("Error: Class already scheduled.");
            } else {
                ArrayList<String> schedule = new ArrayList<>();
                schedule.add(dateTime + " - Room " + roomNumber);
                classSchedule.put(className, schedule);
                writer.println("Success: Class scheduled.");
            }
        }

        /**
         * Method to remove a class from the schedule.
         * It removes the class record from the data structure and notifies the client.
         * @param className The name of the class to be removed.
         * @param writer PrintWriter to send responses to the client.
         */
        private void removeClass(String className, PrintWriter writer) {
            if (classSchedule.containsKey(className)) {
                ArrayList<String> schedule = classSchedule.get(className);
                classSchedule.remove(className);
                writer.println("Success: Class removed. Available time slots: " + schedule);
            } else {
                writer.println("Error: Class not found.");
            }
        }

        /**
         * Method to display the schedule for a class.
         * It prints the schedule to the console.
         * @param className The name of the class to display the schedule for.
         * @param writer PrintWriter to send responses to the client.
         */
        private void displaySchedule(String className, PrintWriter writer) {
            if (classSchedule.containsKey(className)) {
                ArrayList<String> schedule = classSchedule.get(className);
                System.out.println("Class Schedule for " + className + ": " + schedule);
            } else {
                System.out.println("Error: Class not found.");
            }
        }
    }
}
